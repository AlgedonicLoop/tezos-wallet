import { of } from 'rxjs'
import { tap, map, flatMap } from 'rxjs/operators';

// support for node.js
import './node'

import { initialize, origination, delegation, transfer, newWallet, getWallet } from './client'

console.log('[+] tezos wallet client')

// wallet used to create transaction with small tez amount
const wallet = {
    // fun sing train buzz document emotion wheel useless treat produce snake alter poverty animal faith
    // tz1XRJy5ht7HPepFk6uz79nnfA98kuTBBnjN
    // qqpigcir.sffflyri@tezos.example.org9ifFxiNEA4
    secretKey: 'edsk3Ux4WbGRaof25ukMi2o3VZxzcbth4Y8D1psZ4ZMkMFPkqqucRB',
    publicKey: 'edpkvKp59pisNXMMRAoqdyfHe4XRthWoYxP2UmonCG7z28txnP5aUh',
    publicKeyHash: 'tz1XRJy5ht7HPepFk6uz79nnfA98kuTBBnjN',
}

//const walletObservable = of({})
const walletObservable = of(wallet)

// create observable with state  
walletObservable.pipe(

    // wait for sodium to initialize
    initialize(),

    // create mnemonic, secret/public key for new wallet 
    newWallet(),

    // get more details for new wallet
    // getWallet(state => ({
    //     'publicKeyHash': state.publicKeyHash,
    //     //'publicKeyHash': baseWallet.publicKeyHash,
    // })),

    // send small amount to new wallet and wait for block creation
    // transfer((state: any) => ({
    //     'secretKey': wallet.secretKey,
    //     'publicKey': wallet.publicKey,
    //     'publicKeyHash': wallet.publicKeyHash,
    //     // use wallet address from state generated by newWallet()
    //     'to': state.publicKeyHash,
    //     'amount': 3,
    // })),

    // // originate delegatable contract   
    // map(state => ({
    //     ...state.newWallet,
    //     'newWallet': state.newWallet,
    // })),
    // balance(),

    // // create/originate new delegateble wallet with delegate
    // // this is only posible for wallet with transaction history 
    // map((state: any) => ({
    //     ...state,
    //     'delegate': 'tz1btz5Av9BdpoTPnS9zGyPvpgAovmaZ23iN',
    //     // 'delegate': state.newWallet.publicKeyHash,
    //     'amount': 0,
    // })),
    // origination(),

    //balance(),

    // // change delegate
    // delegation(),

).subscribe(
    data => console.log('[+] ok'),
    error => console.error('[-] error', error)
)
